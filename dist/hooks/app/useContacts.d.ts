import React from 'react';
type UseContactParams = {
    formId?: number | string;
};
declare const useContacts: (params: UseContactParams) => {
    paginate: (page: number) => Promise<any>;
    loading: boolean;
    loaded: any;
    delayedLoading: any;
    errors: Record<string, any>;
    empty: any;
    editing: any;
    isValid: any;
    contact: any;
    contacts: any[];
    findContact: (id: import("frontend-js").ID) => any;
    findContacts: (queryParams?: import("frontend-js").QueryParamsType) => void;
    saveContact: (resource: any) => any;
    updateContact: (resource: any) => any;
    updateContacts: (ids: import("frontend-js").ID[], data: any) => Promise<any>;
    createContact: (resource: any) => any;
    deleteContact: (id: import("frontend-js").ID) => Promise<any>;
    deleteContacts: (ids: import("frontend-js").ID[]) => void;
    submitForm: (contact: any) => Promise<void>;
    loadMore: () => void;
    addAttachment: (id: import("frontend-js").ID, fieldName: string, attachmentId: import("frontend-js").ID) => any;
    removeAttachment: (id: import("frontend-js").ID, fieldName: string) => any;
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    handleChangePage: any;
    query: import("frontend-js").QueryParamsType;
    setQuery: (params: import("frontend-js").QueryParamsType) => void;
    reloadContact: any;
    reloadContacts: () => Promise<any>;
    page: number;
    numPages: number;
    perPage: number;
    totalCount: number;
    updatePositions: (sorted: any[]) => Promise<any>;
    sortBy: any;
    sortDirection: any;
    handleSort: any;
    setContact: (value: any) => void;
    setContacts: (value: any[]) => void;
    startIndex: any;
    endIndex: any;
    loadingWrapper: (fn: () => void) => void;
};
export default useContacts;
