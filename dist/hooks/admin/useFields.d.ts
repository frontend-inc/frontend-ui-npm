import React from 'react';
type UseFieldsParams = {
    collectionId: string;
};
declare const useFields: (props: UseFieldsParams) => {
    paginate: (page: number) => Promise<any>;
    loading: boolean;
    errors: Record<string, any>;
    empty: any;
    editing: any;
    isValid: any;
    field: any;
    fields: any[];
    findField: (id: import("frontend-js").ID) => any;
    findFields: (queryParams?: import("frontend-js").QueryParamsType) => void;
    saveField: (resource: any) => any;
    updateField: (resource: any) => any;
    updateFields: (ids: import("frontend-js").ID[], data: any) => Promise<any>;
    createField: (resource: any) => any;
    deleteField: (id: import("frontend-js").ID) => Promise<any>;
    deleteFields: (ids: import("frontend-js").ID[]) => void;
    loadMore: () => void;
    publish: (ids: import("frontend-js").ID[]) => Promise<any>;
    unpublish: (id: import("frontend-js").ID[]) => Promise<any>;
    addAttachment: (id: import("frontend-js").ID, fieldName: string, attachmentId: import("frontend-js").ID) => any;
    removeAttachment: (id: import("frontend-js").ID, fieldName: string) => any;
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    handleChangePage: any;
    query: import("frontend-js").QueryParamsType;
    setQuery: (params: import("frontend-js").QueryParamsType) => void;
    reloadField: any;
    reloadFields: () => Promise<any>;
    page: number;
    numPages: number;
    perPage: number;
    totalCount: number;
    updatePositions: (sorted: any[]) => Promise<any>;
    sortBy: any;
    sortDirection: any;
    handleSort: any;
    setField: (value: any) => void;
    setFields: (value: any[]) => void;
    startIndex: any;
    endIndex: any;
};
export default useFields;
