import React from 'react';
declare const useProductCollections: () => {
    paginate: (page: number) => Promise<any>;
    loading: boolean;
    loaded: any;
    delayedLoading: any;
    errors: Record<string, any>;
    empty: any;
    editing: any;
    isValid: any;
    productCollection: any;
    productCollections: any[];
    findProductCollection: (id: import("frontend-js").ID) => any;
    findProductCollections: (queryParams?: import("frontend-js").QueryParamsType) => void;
    saveProductCollection: (resource: any) => any;
    updateProductCollection: (resource: any) => any;
    updateProductCollections: (ids: import("frontend-js").ID[], data: any) => Promise<any>;
    createProductCollection: (resource: any) => any;
    deleteProductCollection: (id: import("frontend-js").ID) => Promise<any>;
    deleteProductCollections: (ids: import("frontend-js").ID[]) => void;
    loadMore: () => void;
    publish: (ids: import("frontend-js").ID[]) => Promise<any>;
    unpublish: (id: import("frontend-js").ID[]) => Promise<any>;
    addProducts: (productCollectionId: number, productIds: number[]) => Promise<void>;
    removeProducts: (productCollectionId: number, productIds: number[]) => Promise<void>;
    addAttachment: (id: import("frontend-js").ID, fieldName: string, attachmentId: import("frontend-js").ID) => any;
    removeAttachment: (id: import("frontend-js").ID, fieldName: string) => any;
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    handleChangePage: any;
    query: import("frontend-js").QueryParamsType;
    setQuery: (params: import("frontend-js").QueryParamsType) => void;
    reloadProductCollection: any;
    reloadProductCollections: () => Promise<any>;
    page: number;
    numPages: number;
    perPage: number;
    totalCount: number;
    updatePositions: (sorted: any[]) => Promise<any>;
    sortBy: any;
    sortDirection: any;
    handleSort: any;
    setProductCollection: (value: any) => void;
    setProductCollections: (value: any[]) => void;
    startIndex: any;
    endIndex: any;
    aiGenerate: (prompt: any) => Promise<void>;
};
export default useProductCollections;
