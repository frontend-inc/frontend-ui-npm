import React from 'react';
type UseDocumentProps = {
    collection: string | number;
};
declare const useDocuments: (props: UseDocumentProps) => {
    paginate: (page: number) => Promise<any>;
    loading: boolean;
    loaded: any;
    delayedLoading: any;
    errors: Record<string, any>;
    empty: any;
    editing: any;
    isValid: any;
    document: any;
    documents: any[];
    findDocument: (id: import("frontend-js").ID) => any;
    findDocuments: (queryParams?: import("frontend-js").QueryParamsType) => void;
    saveDocument: (resource: any) => any;
    updateDocument: (resource: any) => any;
    updateDocuments: (ids: import("frontend-js").ID[], data: any) => Promise<any>;
    createDocument: (resource: any) => any;
    deleteDocument: (id: import("frontend-js").ID) => Promise<any>;
    deleteDocuments: (ids: import("frontend-js").ID[]) => void;
    loadMore: () => void;
    publish: (ids: import("frontend-js").ID[]) => Promise<any>;
    unpublish: (id: import("frontend-js").ID[]) => Promise<any>;
    addReferences: (sourceId: number, targetIds: number[]) => Promise<void>;
    removeReferences: (sourceId: number, targetIds: number[]) => Promise<void>;
    updateReferencePositions: (id: number, sorted: any[]) => Promise<any>;
    addProductReferences: (documentId: number, productIds: number[]) => Promise<void>;
    removeProductReferences: (documentId: number, productIds: number[]) => Promise<void>;
    updateProductReferencePositions: (id: number, sorted: any[]) => Promise<any>;
    addAttachment: (id: import("frontend-js").ID, fieldName: string, attachmentId: import("frontend-js").ID) => any;
    removeAttachment: (id: import("frontend-js").ID, fieldName: string) => any;
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    handleChangePage: any;
    query: import("frontend-js").QueryParamsType;
    setQuery: (params: import("frontend-js").QueryParamsType) => void;
    reloadDocument: any;
    reloadDocuments: () => Promise<any>;
    page: number;
    numPages: number;
    perPage: number;
    totalCount: number;
    updatePositions: (sorted: any[]) => Promise<any>;
    sortBy: any;
    sortDirection: any;
    handleSort: any;
    setDocument: (value: any) => void;
    setDocuments: (value: any[]) => void;
    startIndex: any;
    endIndex: any;
};
export default useDocuments;
